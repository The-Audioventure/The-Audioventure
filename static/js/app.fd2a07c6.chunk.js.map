{"version":3,"sources":["src/components/ViewContainer.js","src/components/StyledBackground.js","src/utilities.js","src/components/TextBanner.js","src/AppConstants.js","src/screens/ChooseMoodOrPlaceScreen.js","src/components/CircleButton.js","src/components/IconButton.js","src/screens/MatchMyMoodScreen.js","src/screens/TakeMeSomewhereScreen.js","src/screens/PlaylistScreen.js","src/screens/HomeScreen.js","App.js","webpack:////home/yhussain/Native_apps/ChooseYourOwnAudioventure_V3/index.js?f349"],"names":["ViewContainer","props","viewStyle","this","StyleSheet","create","style","justifyContent","backgroundColor","color","alignItems","height","width","console","log","nudge","compose","top","bottom","left","right","horizontal","flexDirection","apart","radius","borderRadius","round","onPress","children","View","React","Component","StyledBackground","resizeMode","overflow","ImageBackground","source","image","utilities","calculate_scaledImageDim","windowDim","imageDim","window_aspectRatio","scalingRatio","TextBanner","propStyles","default","borderWidth","borderColor","flexWrap","paddingHorizontal","justLeft","borderLeftWidth","noTop","borderTopWidth","borderTopLeftRadius","borderTopRightRadius","noBottom","borderBottomWidth","borderBottomLeftRadius","borderBottomRightRadius","bottomCorners","justBorder","fontStyle","fontFamily","fontSize","textAlign","textAlignVertical","opacity","lineHeight","touchable","TouchableOpacity","Text","AppConstants","BACKGROUND_IMAGE","uri","BACKGROUND_IMAGE_HEIGHT","BACKGROUND_IMAGE_WIDTH","BUTTON_BORDER_WIDTH","GOOGLE_DOCS_TEXT_CONVERSION_RATIO","TILE_FONT_SIZE","CLICK_FONT_SIZE","LINE_SPACING","ChooseMoodOrPlace","navigation","useState","Dimensions","get","setWindow","window","addEventListener","useFonts","PressStart2P_400Regular","scaledImageDim","scaledButtonBorderWidth","scaled_titleFontSize","scaled_titleLineHeight","navigate","CircleButton","fillRectangle","iteration","starting","barHeight","fillRectangleHeight","roundedRadius","Math","ceil","y","size","sqrt","pow","verticalLocation","location","key","baseRectangleStyle","renderLines","Array","numberOfRectangles","map","_","index","fillRectangles","Fragment","circleDiameter","position","zIndex","elevation","localStyles","styles","container","activeOpacity","button","alignContent","IconButton","centerHeight","displaceRadius","sin","angle","centerWidth","cos","iconSize","Image","ICONS","back","name","home","cloudy","beach","party","icy","space","random","MatchMyMoodScreen","CENTER_SCREEN_HEIGHT","CENTER_SCREEN_WIDTH","ICONS_SCREEN_RADIUS","PI","TakeMeSomewhereScreen","PlaylistScreen","scaled_subtitleFontSize","scaled_subtitleLineHeight","HomeScreen","navigator","createStackNavigator","Home","ChooseMoodOrPlaceScreen","MatchMyMood","TakeMeSomewhere","Playlist","initialRouteName","headerMode","defaultNavigationOptions","title","cardStyle","createAppContainer","registerRootComponent","App"],"mappings":"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","file":"static/js/app.fd2a07c6.chunk.js","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, Image, ShadowPropTypesIOS } from 'react-native';\nimport { TouchableHighlight, TouchableOpacity } from 'react-native-gesture-handler';\n\n\nconst styles = (props) => StyleSheet.create({\n    style: {\n        justifyContent: 'center',\n        backgroundColor: props.color,\n        alignItems: 'center',\n        height: props.height,\n        width: props.width\n    }\n\n});\n\nconst nudge = (props) => StyleSheet.create({\n    style: {\n        top: props.top,\n        bottom: props.bottom,\n        left: props.left,\n        right: props.right\n    }\n})\n\nconst horizontal = (props) => StyleSheet.create({\n    style: {\n        justifyContent: 'flex-start',\n        flexDirection: 'row'\n    }\n})\n\nconst apart = (props) => StyleSheet.create({\n    style: {\n        justifyContent: \"space-between\"\n    }\n})\n\nconst round = (props) => StyleSheet.create({\n    style: {\n        borderRadius: props.radius\n    }\n})\n\nexport default class ViewContainer extends React.Component {\n    render() {\n        var viewStyle = styles(this.props).style;\n            console.log(this.props)\n            if (this.props.nudge){\n                console.log('nudge!')\n                viewStyle = StyleSheet.compose(viewStyle, nudge(this.props).style);\n            }\n            if (this.props.horizontal) {\n                viewStyle = StyleSheet.compose(viewStyle, horizontal(this.props).style);\n            }\n            if (this.props.apart) {\n                viewStyle = StyleSheet.compose(viewStyle, apart(this.props).style);\n            }\n            if (this.props.radius) {\n                viewStyle = StyleSheet.compose(viewStyle, round(this.props).style);\n            }\n\n        if (this.props.onPress) {\n            return (<TouchableOpacity onPress={this.props.onPress} style={viewStyle}>{this.props.children}</TouchableOpacity>)\n        } else {\n            return (<View style={viewStyle}>{this.props.children}</View>)\n        }\n        \n    }\n};","import React from 'react';\nimport { View, Text, StyleSheet, Image, ShadowPropTypesIOS, ImageBackground } from 'react-native';\n\n\nconst styles = (props) => StyleSheet.create({\n    style: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: props.height,\n        width: props.width,\n        resizeMode: \"center\",\n        backgroundColor: 'black',\n        overflow: 'hidden',\n    }\n});\n\nexport default class StyledBackground extends React.Component {\n    render() {\n        var style = styles(this.props);\n        console.log(this.props);\n\n        return (\n            <ImageBackground style={style.style} source={this.props.image}> \n                {this.props.children}\n            </ImageBackground>\n        )\n    }\n};","\nconst utilities = {\n\n    calculate_scaledImageDim: function(windowDim, imageDim) {\n\n        const window_aspectRatio = windowDim.width/windowDim.height;\n        const image_aspectRatio = imageDim.width / imageDim.height;\n    \n        if (image_aspectRatio < window_aspectRatio) {\n            const scalingRatio = windowDim.height/imageDim.height;\n    \n            const scaledImageDim = {height: windowDim.height, width: scalingRatio*imageDim.width, scalingRatio: scalingRatio }\n            return scaledImageDim;\n        }\n        else {\n            const scalingRatio = windowDim.width/imageDim.width;\n            const scaledImageDim = {height: scalingRatio*imageDim.height, width: windowDim.width, scalingRatio: scalingRatio }\n            return scaledImageDim;\n        }\n    }\n}\n\n\nexport default utilities;","import React from 'react';\nimport { View, Text, StyleSheet,TouchableOpacity, Image, ShadowPropTypesIOS, ImageBackground } from 'react-native';\nimport ViewContainer from \"../components/ViewContainer\";\n\nconst styles = (props) => StyleSheet.create({\n    default: {\n        borderWidth: props.borderWidth,\n        borderColor: '#b4a7d6',\n        backgroundColor: '#8e7cc3c6',\n        width: props.width,\n        height: props.height,\n        borderRadius: 3,\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        overflow: 'hidden',\n        paddingHorizontal: '3%',\n        alignItems: 'center',\n        \n    },\n    justLeft: {\n        borderWidth: 0,\n        borderLeftWidth: props.borderWidth,\n        borderColor: '#b4a7d6',\n        backgroundColor: '#8e7cc3c6',\n        width: props.width,\n        height: props.height,\n        borderRadius: 0,\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    noTop: {\n        borderWidth: props.borderWidth,\n        borderTopWidth: 0,\n        borderColor: '#b4a7d6',\n        backgroundColor: '#8e7cc3c6',\n        width: props.width,\n        height: props.height,\n        borderRadius: 3,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0\n    },\n    noBottom: {\n        borderWidth: props.borderWidth,\n        borderBottomWidth: 0,\n        borderColor: '#b4a7d6',\n        backgroundColor: '#8e7cc3c6',\n        width: props.width,\n        height: props.height,\n        borderRadius: 3,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n    },\n    bottomCorners: {\n        borderWidth: props.borderWidth,\n        // borderTopWidth: 0\n        borderColor: '#b4a7d6',\n        backgroundColor: '#8e7cc3c6',\n        width: props.width,\n        height: props.height,\n        borderRadius: 3,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n    },\n    justBorder: {\n        borderWidth: props.borderWidth,\n        borderColor: '#b4a7d6',\n        width: props.width,\n        height: props.height,\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    fontStyle: {\n        fontFamily: 'PressStart2P_400Regular',\n        fontSize: props.fontSize,\n        textAlign: 'center',\n        textAlignVertical: 'center',\n        color: 'white',\n        opacity: 1,\n        lineHeight: props.lineHeight\n    }\n});\n\nexport default class TextBanner extends React.Component {\n    render() {\n\n        var propStyles = styles(this.props);\n        var viewStyle = propStyles.default;\n        // console.log(this.props);\n        if (this.props.justLeft) {\n            viewStyle = propStyles.justLeft;\n        } else if (this.props.noTop) {\n            viewStyle = propStyles.noTop;\n        } else if (this.props.noBottom) {\n            viewStyle = propStyles.noBottom;\n        } else if (this.props.bottomCorners) {\n            viewStyle = propStyles.bottomCorners;\n        } else if (this.props.justBorder) {\n            viewStyle = propStyles.justBorder;\n        }\n        if (this.props.touchable) {\n            return (\n                <TouchableOpacity style={viewStyle}>\n                    <ViewContainer height='100%' width='100%'>\n                        <Text style={propStyles.fontStyle}>{this.props.children}</Text>\n                    </ViewContainer>\n                </TouchableOpacity>\n            )\n        } else {\n            return (\n                <View style={viewStyle}>\n                    <Text style={propStyles.fontStyle}>{this.props.children}</Text>\n                </View>\n            )\n        }\n        \n    }\n};","const AppConstants = {\n    BACKGROUND_IMAGE: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/backgroundBanner.gif\" },\n    BACKGROUND_IMAGE_HEIGHT: 867,\n    BACKGROUND_IMAGE_WIDTH: 1542,\n    BUTTON_BORDER_WIDTH: 7,\n    GOOGLE_DOCS_TEXT_CONVERSION_RATIO: 2.14285714,\n    TILE_FONT_SIZE: 24 * 2.14285714,\n    CLICK_FONT_SIZE: 14 * 2.14285714,\n    LINE_SPACING: 1.15\n};\n\nexport default AppConstants;","import { Text, Image, StyleSheet, View, Button, TouchableOpacity, ImagePropTypes, Touchable, ImageBackground, ScaledSize } from \"react-native\";\nimport { Dimensions } from 'react-native';\nimport AppLoading from 'expo-app-loading';\nimport {useFonts, PressStart2P_400Regular} from '@expo-google-fonts/press-start-2p'\nimport React, {useState} from 'react';\nimport ViewContainer from \"../components/ViewContainer\";\nimport StyledBackground from \"../components/StyledBackground\"\nimport utilities from '../utilities'\nimport TextBanner from \"../components/TextBanner\";\nimport AppConstants from \"../AppConstants\"\n\nconst ChooseMoodOrPlace = ({navigation}) => {\n\n    // keep the known window dimensions up to date amidst resize\n    const [windowDim, setWindow] = useState(Dimensions.get('window'));\n    window.addEventListener('resize', () => setWindow(Dimensions.get('window')))\n\n    // load in the font for usage\n    let [fontsLoaded] = useFonts({\n        PressStart2P_400Regular,\n    });\n    if (!fontsLoaded) {\n    return <AppLoading />;\n    }\n\n    const imageDim = {height: AppConstants.BACKGROUND_IMAGE_HEIGHT, width: AppConstants.BACKGROUND_IMAGE_WIDTH};\n    const scaledImageDim = utilities.calculate_scaledImageDim(windowDim, imageDim);\n    const scaledButtonBorderWidth = scaledImageDim.scalingRatio * AppConstants.BUTTON_BORDER_WIDTH;\n    const scaled_titleFontSize = scaledImageDim.scalingRatio * AppConstants.TILE_FONT_SIZE;\n    const scaled_titleLineHeight = scaled_titleFontSize * AppConstants.LINE_SPACING;\n    const scaled_subtitleFontSize = scaledImageDim.scalingRatio * AppConstants.CLICK_FONT_SIZE;\n    const scaled_subtitleLineHeight = scaled_subtitleFontSize * AppConstants.LINE_SPACING;\n    \n\n    return (\n        <ViewContainer color='white' height='100%' width='100%' horizontal >\n            <TouchableOpacity \n                onPress={()=>{navigation.navigate('MatchMyMood')}}\n                style={{backgroundColor: 'rgb(238,238,238)', height: '100%', width: '50%', justifyContent: 'center', alignItems: 'center'}}\n            >\n                <TextBanner \n                    borderWidth={scaledButtonBorderWidth}\n                    fontSize={scaled_titleFontSize}\n                    lineHeight={scaled_titleLineHeight}\n                    height='20%'\n                    width='80%'\n                >[Match My<br></br>Mood!]</TextBanner>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n                onPress={()=>{navigation.navigate('ChooseMoodOrPlace')}}\n                style={{backgroundColor: '#8e7cc3c6', height: '100%', width: '50%', justifyContent: 'center', alignItems: 'center'}}\n            >\n                <TextBanner \n                    borderWidth={scaledButtonBorderWidth}\n                    fontSize={scaled_titleFontSize}\n                    lineHeight={scaled_titleLineHeight}\n                    height='20%'\n                    width='80%'\n                >[Take Me<br></br>Somewhere!]</TextBanner>\n            </TouchableOpacity>\n        </ViewContainer>\n    )\n\n}\n\nexport default ChooseMoodOrPlace;\n","import React from 'react';\nimport {View, StyleSheet, TouchableOpacity } from 'react-native';\n\nexport default class CircleButton extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.numberOfRectangles = 15\n    this.radius = this.props.circleDiameter / 2\n\n    // base the height of each bars on the circle radius.\n    // Add 1 to the value b/c we will subtract one down below to get rid of the zero index\n    this.fillRectangleHeight = this.radius / (this.numberOfRectangles + 1)\n\n    // The style used for the rectangles\n    // the zIndex and elevation of 10 puts the rectangles in front of the clickable button\n    this.baseRectangleStyle = {\n      position: 'absolute',\n      zIndex: 10,\n      elevation: 10,\n    }\n  }\n\n  fillRectangle = (iteration, starting) => {\n    const barHeight = this.fillRectangleHeight\n    const roundedRadius = Math.ceil(this.radius)\n    const y = (barHeight * iteration)\n\n    const x = Math.ceil(Math.sqrt(Math.pow(this.radius, 2) - Math.pow(y, 2)))\n\n    let width = roundedRadius - x\n\n    // The bar dimensions\n    const size = {\n      width: width,\n      height: barHeight\n    };\n\n    const verticalLocation = y + roundedRadius\n\n    let location = {}\n    if(starting === 'topLeft'){\n      location = {\n        left: 0,\n        bottom: verticalLocation,\n      };\n    }else if(starting === 'bottomLeft'){\n      location = {\n        left: 0,\n        top: verticalLocation,\n      }\n    }else if(starting === 'topRight'){\n      location = {\n        right: 0,\n        top: verticalLocation,\n      }\n    }else if(starting === 'bottomRight'){\n      location = {\n        right: 0,\n        bottom: verticalLocation,\n      }\n    };\n\n    // Create a unique key to identify the element\n    let key = \"\" + iteration + starting\n\n    return(\n      <View key={key} style={{...this.baseRectangleStyle, ...size, ...location}}></View>\n    )\n  };\n\n  renderLines = (starting) => {\n    //start with index+1 b/c 0 will be a width of zero, so no point in doing that math\n    return [...Array(this.numberOfRectangles)].map((_, index) => this.fillRectangle(index+1, starting))\n  }\n\n  fillRectangles = () => {\n    return(\n      <React.Fragment>\n        {this.renderLines('topLeft')}\n        {this.renderLines('bottomLeft')}\n        {this.renderLines('topRight')}\n        {this.renderLines('bottomRight')}\n      </React.Fragment>\n     )\n   };\n\n  render(){\n    let localStyles = styles(this.props)\n\n    return (\n      <View style={localStyles.container}>\n        <TouchableOpacity\n          activeOpacity={.2}\n          style = {localStyles.button}\n          onPress = {this.props.onPress}\n        >\n          {this.props.children}\n        </TouchableOpacity>\n\n        {this.fillRectangles()}\n      </View>\n    )\n  }\n}\n\nconst styles = (props) => StyleSheet.create({\n  container: {\n    position: 'relative',\n    zIndex: 0,\n  },\n  button: {\n    backgroundColor: 'rgba(20,174,255,0.31)',\n    justifyContent: 'center',\n    alignContent: 'center',\n    borderRadius: (props.circleDiameter / 2),\n    width: props.circleDiameter,\n    height: props.circleDiameter,\n\n    top: props.top,\n    bottom: props.bottom,\n    right: props.right,\n    left: props.left\n  },\n});","\nimport { Text, Image, StyleSheet, View, Button, TouchableOpacity, ImagePropTypes, Touchable, ImageBackground, ScaledSize } from \"react-native\";\nimport { Dimensions } from 'react-native';\nimport AppLoading from 'expo-app-loading';\nimport {useFonts, PressStart2P_400Regular} from '@expo-google-fonts/press-start-2p'\nimport React, {useState} from 'react';\nimport ViewContainer from \"../components/ViewContainer\";\nimport StyledBackground from \"../components/StyledBackground\"\nimport utilities from '../utilities'\nimport TextBanner from \"../components/TextBanner\";\nimport AppConstants from \"../AppConstants\"\nimport { AntDesign , Ionicons } from '@expo/vector-icons';\nimport CircleButton from \"../components/CircleButton\";\n\n\nexport default class IconButton extends React.Component {\n    render() {\n        return (\n            <View \n                style={{bottom: this.props.centerHeight + this.props.displaceRadius * Math.sin(this.props.angle), \n                        left: this.props.centerWidth + this.props.displaceRadius * Math.cos(this.props.angle), \n                        position: 'absolute'}}>\n                <CircleButton  \n                        circleDiameter={this.props.iconSize} \n                        onPress={this.props.onPress}\n                        >\n                        <Image \n                            style={{ height: this.props.iconSize, width: this.props.iconSize, borderRadius: 100 }} \n                            source={this.props.image}>\n                        </Image>\n                    </CircleButton>\n            </View>\n        )\n    }\n}","import { Text, Image, StyleSheet, View, Button, TouchableOpacity, ImagePropTypes, Touchable, ImageBackground, ScaledSize } from \"react-native\";\nimport { Dimensions } from 'react-native';\nimport AppLoading from 'expo-app-loading';\nimport {useFonts, PressStart2P_400Regular} from '@expo-google-fonts/press-start-2p'\nimport React, {useState} from 'react';\nimport ViewContainer from \"../components/ViewContainer\";\nimport StyledBackground from \"../components/StyledBackground\"\nimport utilities from '../utilities'\nimport TextBanner from \"../components/TextBanner\";\nimport AppConstants from \"../AppConstants\"\nimport { AntDesign , Ionicons } from '@expo/vector-icons';\nimport CircleButton from \"../components/CircleButton\";\nimport IconButton from \"../components/IconButton\";\n\nconst ICONS = {\n    back: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/backIcon.png\", name: \"back\"},\n    home: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/homeIcon.png\", name: \"home\"},\n    cloudy: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/cloudyIcon.png\", name: \"cloudy\"},\n    beach: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/beachIcon.png\", name: \"beach\"},\n    party: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/partyIcon.png\", name: \"party\"},\n    icy: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/icyIcon.png\", name: \"icy\"},\n    space: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/planetIcon.png\", name: \"space\"},\n    random: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/randomIcon.png\", name: \"random\"}\n\n}\n\n\n\n\nconst MatchMyMoodScreen = ({navigation}) => {\n\n    // keep the known window dimensions up to date amidst resize\n    const [windowDim, setWindow] = useState(Dimensions.get('window'));\n    window.addEventListener('resize', () => setWindow(Dimensions.get('window')))\n\n    // load in the font for usage or error\n    let [fontsLoaded] = useFonts({\n        PressStart2P_400Regular,\n    });\n    if (!fontsLoaded) {\n    return <AppLoading />;\n    }\n\n    const ICON_SIZE = 180;\n\n    const imageDim = {height: AppConstants.BACKGROUND_IMAGE_HEIGHT, width: AppConstants.BACKGROUND_IMAGE_WIDTH};\n    const scaledImageDim = utilities.calculate_scaledImageDim(windowDim, imageDim);\n    const scaledButtonBorderWidth = scaledImageDim.scalingRatio * AppConstants.BUTTON_BORDER_WIDTH;\n    const scaled_titleFontSize = scaledImageDim.scalingRatio * AppConstants.TILE_FONT_SIZE;\n    const scaled_titleLineHeight = scaled_titleFontSize * AppConstants.LINE_SPACING;\n    const scaled_subtitleFontSize = scaledImageDim.scalingRatio * AppConstants.CLICK_FONT_SIZE;\n    const scaled_subtitleLineHeight = scaled_subtitleFontSize * AppConstants.LINE_SPACING;\n\n    const CENTER_SCREEN_HEIGHT = scaledImageDim.height/2 - ICON_SIZE*scaledImageDim.scalingRatio/2;\n    const CENTER_SCREEN_WIDTH = scaledImageDim.width/2 - ICON_SIZE*scaledImageDim.scalingRatio/2;\n    const ICONS_SCREEN_RADIUS = 320*scaledImageDim.scalingRatio;\n    return (\n        <ViewContainer color='black' height='100%' width='100%' >\n            <StyledBackground \n                image={AppConstants.BACKGROUND_IMAGE} \n                height={scaledImageDim.height}\n                width={scaledImageDim.width}>\n                \n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.back}\n                    angle={2*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                    onPress={()=>{navigation.navigate('TakeMeSomewhere')}}\n                />\n               \n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.home}\n                    angle={1*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.cloudy}\n                    angle={0}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.beach}\n                    angle={7*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.party}\n                    angle={6*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.icy}\n                    angle={5*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.space}\n                    angle={4*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.space}\n                    angle={3*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                \n\n            </StyledBackground>\n        </ViewContainer>\n    )\n}\n\nexport default MatchMyMoodScreen;","import { Text, Image, StyleSheet, View, Button, TouchableOpacity, ImagePropTypes, Touchable, ImageBackground, ScaledSize } from \"react-native\";\nimport { Dimensions } from 'react-native';\nimport AppLoading from 'expo-app-loading';\nimport {useFonts, PressStart2P_400Regular} from '@expo-google-fonts/press-start-2p'\nimport React, {useState} from 'react';\nimport ViewContainer from \"../components/ViewContainer\";\nimport StyledBackground from \"../components/StyledBackground\"\nimport utilities from '../utilities'\nimport TextBanner from \"../components/TextBanner\";\nimport AppConstants from \"../AppConstants\"\nimport { AntDesign , Ionicons } from '@expo/vector-icons';\nimport CircleButton from \"../components/CircleButton\";\nimport IconButton from \"../components/IconButton\";\n\nconst ICONS = {\n    back: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/backIcon.png\"},\n    home: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/homeIcon.png\"},\n    cloudy: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/cloudyIcon.png\"},\n    beach: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/beachIcon.png\"},\n    party: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/partyIcon.png\"},\n    icy: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/icyIcon.png\"},\n    space: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/planetIcon.png\"},\n    random: {uri: \"https://yahtzeerage.github.io/Choose-Your-Own-Audioventure-Assets/assets/randomIcon.png\"}\n\n}\n\n\nconst TakeMeSomewhereScreen = ({navigation}) => {\n\n    // keep the known window dimensions up to date amidst resize\n    const [windowDim, setWindow] = useState(Dimensions.get('window'));\n    window.addEventListener('resize', () => setWindow(Dimensions.get('window')))\n\n    // load in the font for usage or error\n    let [fontsLoaded] = useFonts({\n        PressStart2P_400Regular,\n    });\n    if (!fontsLoaded) {\n    return <AppLoading />;\n    }\n\n    const ICON_SIZE = 180;\n\n    const imageDim = {height: AppConstants.BACKGROUND_IMAGE_HEIGHT, width: AppConstants.BACKGROUND_IMAGE_WIDTH};\n    const scaledImageDim = utilities.calculate_scaledImageDim(windowDim, imageDim);\n    const scaledButtonBorderWidth = scaledImageDim.scalingRatio * AppConstants.BUTTON_BORDER_WIDTH;\n    const scaled_titleFontSize = scaledImageDim.scalingRatio * AppConstants.TILE_FONT_SIZE;\n    const scaled_titleLineHeight = scaled_titleFontSize * AppConstants.LINE_SPACING;\n    const scaled_subtitleFontSize = scaledImageDim.scalingRatio * AppConstants.CLICK_FONT_SIZE;\n    const scaled_subtitleLineHeight = scaled_subtitleFontSize * AppConstants.LINE_SPACING;\n\n    const CENTER_SCREEN_HEIGHT = scaledImageDim.height/2 - ICON_SIZE*scaledImageDim.scalingRatio/2;\n    const CENTER_SCREEN_WIDTH = scaledImageDim.width/2 - ICON_SIZE*scaledImageDim.scalingRatio/2;\n    const ICONS_SCREEN_RADIUS = 320*scaledImageDim.scalingRatio;\n    return (\n        <ViewContainer color='black' height='100%' width='100%' >\n            <StyledBackground \n                image={AppConstants.BACKGROUND_IMAGE} \n                height={scaledImageDim.height}\n                width={scaledImageDim.width}>\n                \n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.cloudy}\n                    angle={0}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.beach}\n                    angle={7*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.party}\n                    angle={6*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.icy}\n                    angle={5*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.space}\n                    angle={4*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.space}\n                    angle={3*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.back}\n                    angle={2*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                    onPress={()=>{navigation.navigate('MatchMyMood')}}\n                />\n               \n                <IconButton\n                    centerHeight={CENTER_SCREEN_HEIGHT}\n                    centerWidth={CENTER_SCREEN_WIDTH}\n                    displaceRadius={ICONS_SCREEN_RADIUS}\n                    image={ICONS.home}\n                    angle={1*Math.PI/4}\n                    iconSize={ICON_SIZE*scaledImageDim.scalingRatio}\n                />\n\n            </StyledBackground>\n        </ViewContainer>\n    )\n}\n\nexport default TakeMeSomewhereScreen;","import { Text, Image, StyleSheet, View, Button, TouchableOpacity, ImagePropTypes, Touchable, ImageBackground, ScaledSize } from \"react-native\";\nimport { Dimensions } from 'react-native';\nimport AppLoading from 'expo-app-loading';\nimport {useFonts, PressStart2P_400Regular} from '@expo-google-fonts/press-start-2p'\nimport React, {useState} from 'react';\nimport ViewContainer from \"../components/ViewContainer\";\nimport StyledBackground from \"../components/StyledBackground\"\nimport utilities from '../utilities'\nimport TextBanner from \"../components/TextBanner\";\nimport AppConstants from \"../AppConstants\"\n\nconst PlaylistScreen = (props) => {\n\n\n    // keep the known window dimensions up to date amidst resize\n    const [windowDim, setWindow] = useState(Dimensions.get('window'));\n    window.addEventListener('resize', () => setWindow(Dimensions.get('window')))\n\n    // load in the font for usage or error\n    let [fontsLoaded] = useFonts({\n        PressStart2P_400Regular,\n    });\n    if (!fontsLoaded) {\n    return <AppLoading />;\n    }\n\n    \n    const imageDim = {height: AppConstants.BACKGROUND_IMAGE_HEIGHT, width: AppConstants.BACKGROUND_IMAGE_WIDTH};\n    const scaledImageDim = utilities.calculate_scaledImageDim(windowDim, imageDim);\n    const scaledButtonBorderWidth = scaledImageDim.scalingRatio * AppConstants.BUTTON_BORDER_WIDTH;\n    const scaled_titleFontSize = scaledImageDim.scalingRatio * AppConstants.TILE_FONT_SIZE;\n    const scaled_titleLineHeight = scaled_titleFontSize * AppConstants.LINE_SPACING;\n    const scaled_subtitleFontSize = scaledImageDim.scalingRatio * AppConstants.CLICK_FONT_SIZE;\n    const scaled_subtitleLineHeight = scaled_subtitleFontSize * AppConstants.LINE_SPACING;\n\n    return (\n        <ViewContainer color='black' height='100%' width='100%' >\n            <StyledBackground \n                image={AppConstants.BACKGROUND_IMAGE} \n                height={scaledImageDim.height}\n                width={scaledImageDim.width}>\n                <ViewContainer color='blue' height='54.5454545%' width='50%' top='.6%' nudge>\n                    <ViewContainer height='20%' width='100%'>\n                        <TextBanner \n                            noBottom \n                            height='100%' \n                            width='100%' \n                            borderWidth={scaledButtonBorderWidth}\n                            fontSize={scaled_subtitleFontSize}\n                            lineHeight={scaled_subtitleLineHeight}\n                        >{\"Home\"}</TextBanner>\n                    </ViewContainer>\n                    <ViewContainer color='green' height='65%' width='100%'>\n\n                    </ViewContainer>\n                    <ViewContainer color='yellow' height='15%' width='100%'>\n\n                    </ViewContainer>\n                </ViewContainer>\n            </StyledBackground>\n        </ViewContainer>\n    )\n\n}\n\nexport default PlaylistScreen; ","import { Text, Image, StyleSheet, View, Button, TouchableOpacity, ImagePropTypes, Touchable, ImageBackground, ScaledSize } from \"react-native\";\nimport { Dimensions } from 'react-native';\nimport AppLoading from 'expo-app-loading';\nimport {useFonts, PressStart2P_400Regular} from '@expo-google-fonts/press-start-2p'\nimport React, {useState} from 'react';\nimport ViewContainer from \"../components/ViewContainer\";\nimport StyledBackground from \"../components/StyledBackground\"\nimport utilities from '../utilities'\nimport TextBanner from \"../components/TextBanner\";\nimport AppConstants from \"../AppConstants\"\n\nconst HomeScreen = ({navigation}) => {\n\n    // keep the known window dimensions up to date amidst resize\n    const [windowDim, setWindow] = useState(Dimensions.get('window'));\n    window.addEventListener('resize', () => setWindow(Dimensions.get('window')))\n\n    // load in the font for usage or error\n    let [fontsLoaded] = useFonts({\n        PressStart2P_400Regular,\n    });\n    if (!fontsLoaded) {\n    return <AppLoading />;\n    }\n\n    const imageDim = {height: AppConstants.BACKGROUND_IMAGE_HEIGHT, width: AppConstants.BACKGROUND_IMAGE_WIDTH};\n    const scaledImageDim = utilities.calculate_scaledImageDim(windowDim, imageDim);\n    const scaledButtonBorderWidth = scaledImageDim.scalingRatio * AppConstants.BUTTON_BORDER_WIDTH;\n    const scaled_titleFontSize = scaledImageDim.scalingRatio * AppConstants.TILE_FONT_SIZE;\n    const scaled_titleLineHeight = scaled_titleFontSize * AppConstants.LINE_SPACING;\n    const scaled_subtitleFontSize = scaledImageDim.scalingRatio * AppConstants.CLICK_FONT_SIZE;\n    const scaled_subtitleLineHeight = scaled_subtitleFontSize * AppConstants.LINE_SPACING;\n\n    return (\n        <ViewContainer color='black' height='100%' width='100%' >\n            <TouchableOpacity onPress={() => {navigation.navigate('ChooseMoodOrPlace')}}>\n                <StyledBackground \n                    image={AppConstants.BACKGROUND_IMAGE} \n                    height={scaledImageDim.height}\n                    width={scaledImageDim.width}>\n                    <ViewContainer apart nudge color='clear' height='84.5%' width='50%' top='.6%'>\n\n                        <ViewContainer color='clear' height='36%' width='100%'>\n                            <TextBanner\n                                borderWidth={scaledButtonBorderWidth}\n                                fontSize={scaled_titleFontSize}\n                                lineHeight={scaled_titleLineHeight}\n                                height='78%'\n                                width='100%'\n                                bottomCorners\n                            >Choose Your Own Audioventure!</TextBanner>\n                            <TextBanner\n                                borderWidth={scaledButtonBorderWidth}\n                                fontSize={scaled_subtitleFontSize}\n                                lineHeight={scaled_subtitleLineHeight}\n                                height='22%'\n                                width='100%'\n                                noTop\n                            >Click anywhere to start!</TextBanner>\n                        </ViewContainer>\n\n                        <TextBanner\n                            borderWidth={scaledButtonBorderWidth}\n                            fontSize={scaled_subtitleFontSize}\n                            lineHeight={scaled_subtitleLineHeight}\n                            // text=\"Credits\"\n                            height='9%'\n                            width='33%'\n                            touchable\n                        >Credits</TextBanner>\n\n                    </ViewContainer>\n                </StyledBackground>\n            </TouchableOpacity>\n        </ViewContainer>\n    )\n}\n\nexport default HomeScreen;\n","import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { createAppContainer } from 'react-navigation';\nimport {createStackNavigator} from 'react-navigation-stack';\nimport ChooseMoodOrPlaceScreen from './src/screens/ChooseMoodOrPlaceScreen';\nimport MatchMyMoodScreen from './src/screens/MatchMyMoodScreen'\nimport TakeMeSomewhereScreen from './src/screens/TakeMeSomewhereScreen'\nimport PlaylistScreen from './src/screens/PlaylistScreen'\n\nimport HomeScreen from './src/screens/HomeScreen'\n\nconst navigator = createStackNavigator(\n\n  {\n    Home: HomeScreen,\n    ChooseMoodOrPlace: ChooseMoodOrPlaceScreen,\n    MatchMyMood: MatchMyMoodScreen,\n    TakeMeSomewhere: TakeMeSomewhereScreen,\n    Playlist: PlaylistScreen\n  },\n  {\n    initialRouteName: 'Playlist',\n    headerMode: 'none',\n    defaultNavigationOptions: {\n      title: 'App',\n      cardStyle: { backgroundColor: 'black' }\n    },\n  }\n);\n\n\nexport default createAppContainer(navigator);\n\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}